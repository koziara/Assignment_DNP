@page "/CreatePost"
@attribute [Authorize]
@using Domain.Models
@using Domain.DTOs
@using HttpsClients.ClientInterfaces
@using System.ComponentModel.Design.Serialization
@using System.Security.Claims
@inject IPostService postService
@inject NavigationManager navMgr
@inject IUserService userService
@inject AuthenticationStateProvider GetAuthenticationStateAsync
<h3>Create Post</h3>

<div class="card">
    <h3>Create Post</h3>
    <div class="form-group field">
        <label>Title:</label>
        <input type="text" @bind="postTitle"/>
        <label>Body:</label>
        <input type="text" @bind="postBody"/>
    </div>

    <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="Create" class="acceptbtn">Create</button>
        </div>
</div>

@code {
    private string? name="";
    private string postTitle = "";
    private string postBody = "";
    private User user;
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private IEnumerable<Claim>? userClaims;

    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;

        userClaims = user.Claims;
        name = user.Identity.Name!;

    }
    
    private async Task Create()
    {
        msg = "";
        
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(postBody))
        {
            msg = "Body cannot be empty!";
            return;
        }
        try
        {
            
            PostCreationDto dto = new(userService.GetUserByNameAsync(name).Id, postTitle, postBody);
            await postService.CreateAsync(dto);
            navMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}